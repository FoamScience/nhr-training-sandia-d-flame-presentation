import numpy as np
from manim import *

def foam_bo_step(self, cfg, context):
    tt = Text("FoamBO", font_size=self.m_size).shift(1.5*UP)
    bg = SurroundingRectangle(tt, color=BLACK, buff=0.2)
    self.play(GrowFromEdge(VGroup(tt, bg), UP, run_time=self.fadein_rt))

    t1 = Text("OpenFOAM Case", font_size=self.m_size).shift(2*RIGHT+0.5*UP)
    b1 = SurroundingRectangle(t1, color=BLACK, buff=0.2)
    case = [
        Text("Allrun", font_size=self.s_size).next_to(b1, DOWN, buff=0.2),
        Text("Post-processing scripts", font_size=self.s_size).next_to(b1, DOWN, buff=0.6)
    ]
    self.play(GrowFromEdge(VGroup(t1, b1), UP, run_time=self.fadein_rt),
              AnimationGroup(*[FadeIn(c) for c in case]))
    self.next_slide()

    t2 = Text("config.yaml", font_size=self.m_size).shift(2*LEFT+0.5*UP)
    b2 = SurroundingRectangle(t2, color=BLACK, buff=0.2)
    conf = [
        Text("Optimization Settings", font_size=self.s_size).next_to(b2, DOWN, buff=0.2),
        Text("Objective definition", font_size=self.s_size).next_to(b2, DOWN, buff=0.6),
        Text("Parameters definition", font_size=self.s_size).next_to(b2, DOWN, buff=1.0),
        Text("Parameter substitution", font_size=self.s_size).next_to(b2, DOWN, buff=1.4),
    ]
    self.play(GrowFromEdge(VGroup(t2, b2), UP, run_time=self.fadein_rt),
              AnimationGroup(*[FadeIn(c) for c in conf]))
    self.next_slide()

    t3 = Text("local/SLURM", font_size=self.s_size, color=self.main_color).shift(2*DOWN)
    b3 = SurroundingRectangle(t3, color=self.main_color, buff=0.2)
    self.play(
        GrowFromEdge(Group(t3, b3), DOWN, run_time=self.fadein_rt),
        AnimationGroup(*[c.animate.set_color(self.main_color) for c in [case[0], case[1], conf[1]]])
    )

    self.reset_step(cfg, self.last)

    self.items_step(cfg.pareto, self.layout[0])

    grid = Axes(x_range=[2, 10, 2], y_range=[2, 10, 2],
                x_length=5, y_length=5, tips=False,
                axis_config={"color": BLACK},).to_edge(RIGHT)
    graphs = VGroup(grid)
    graphs += Text(r"Objective 1", font_size=self.s_size).next_to(grid, 0.5*DOWN)
    graphs += Text(r"Objective 2", font_size=self.s_size).next_to(grid, LEFT).rotate(PI/2).shift(0.5*RIGHT)
    dots = [Dot(color=self.important_color).move_to(grid.c2p(x, 20.0/x)) for x in np.linspace(2.5, 9.5, 6)]
    graphs.add(*dots)
    self.play(DrawBorderThenFill(graphs, run_time=self.drawborderthenfill_rt))
    self.next_slide()

    from numpy.random import RandomState
    rng = RandomState(0)
    opt = grid.plot(lambda x: 20.0/x, color=self.important_color)
    opt_area = grid.get_area(opt, x_range=(2, 10), opacity=0.3, color=[self.secondary_color, self.secondary_color])
    arrows = [Arrow(dots[3].get_center()+3*UP+0.5*RIGHT, d.get_center(), color=self.important_color, max_tip_length_to_length_ratio=0.04, max_stroke_width_to_length_ratio=0.3) for d in [dots[2], dots[4]]]
    self.play(FadeIn(opt_area, run_time=self.fadein_rt), AnimationGroup(*[GrowArrow(a, run_time=self.fadein_rt) for a in arrows]))
    tt = Text("generated by surrogate model", font_size=self.s_size, color=self.important_color).next_to(arrows[0], UP)
    tt1 = Text("Best parameter set", font_size=self.s_size, color=self.important_color).next_to(tt, 0.5*UP)
    self.play(FadeIn(tt1, tt, run_time=self.fadein_rt))
    self.next_slide()

    self.play(FadeOut(opt_area, tt1, tt, run_time=self.fadeout_rt), AnimationGroup(*[FadeOut(a, run_time=self.fadeout_rt) for a in arrows]))
    line = grid.plot(lambda x: 10, color=self.main_color)
    opt_area = grid.get_area(line, x_range=(2, 10), opacity=0.3, color=[self.main_color, self.main_color], bounded_graph=opt)
    dots = [Dot(color=self.main_color).move_to(grid.c2p(x, y)) for x, y in zip(rng.uniform(2, 10, 10), rng.uniform(2, 10, 10)) if y >= 20/x]
    dots.append(Dot(color=self.main_color).move_to(grid.c2p(5, 4)))
    self.play(FadeIn(opt_area, run_time=self.fadein_rt), AnimationGroup(*[DrawBorderThenFill(d, run_time=self.drawborderthenfill_rt) for d in dots]))
    
    arrows = [Arrow(dots[-1].get_center()+LEFT+DOWN, d.get_center(), color=self.main_color, max_tip_length_to_length_ratio=0.04, max_stroke_width_to_length_ratio=0.3) for d in [dots[2], dots[3]]]
    tt = Text("Trials", font_size=self.s_size, color=self.main_color).move_to(dots[-1].get_center()+LEFT+DOWN).shift(0.2*LEFT)
    self.play(AnimationGroup(*[GrowArrow(a, run_time=self.fadein_rt) for a in arrows]), FadeIn(tt, run_time=self.fadein_rt))
    self.next_slide()
    self.play(FadeOut(opt_area, tt, run_time=self.fadeout_rt))
    self.play(FadeOut(graphs, run_time=self.fadeout_rt), AnimationGroup(*[FadeOut(d, run_time=self.fadeout_rt) for d in dots]), AnimationGroup(*[FadeOut(a, run_time=self.fadeout_rt) for a in arrows]))

    grid = Axes(x_range=[2, 10, 2], y_range=[2, 10, 2],
                x_length=5, y_length=5, tips=False,
                axis_config={"color": BLACK},).to_edge(RIGHT)
    graphs = VGroup(grid)
    graphs += Text(r"Rel. feature imporance to objectives (%)", font_size=self.s_size).rotate(PI/2).next_to(grid, LEFT)
    def rect_verts(grid, x, y, w, h):
        return [grid.c2p(x, y), grid.c2p(x+w, y), grid.c2p(x+w, y+h), grid.c2p(x, y+h)]
    bar1 = [Polygon(*rect_verts(grid, e['x'], 2, 0.5, e['w']), color=self.main_color, fill_opacity=0.5) for e in [{'w': 4, 'x': 2.5}, {'w': 3, 'x': 5.5}, {'w': 1, 'x': 8.5}]]
    bar2 = [Polygon(*rect_verts(grid, e['x'], 2, 0.5, e['w']), color=self.secondary_color, fill_opacity=0.5) for e in [{'w': 1, 'x': 3.1}, {'w': 5, 'x': 6.1}, {'w': 2, 'x': 9.1}]]
    tts = [Text(f"Param. {i}", font_size=self.s_size).move_to(grid.c2p(3+3*i, 1.5)) for i in range(3)]
    graphs.add(*bar1, *bar2, *tts)
    self.play(DrawBorderThenFill(graphs, run_time=self.drawborderthenfill_rt))

    self.items_step(cfg.feature_importance, self.layout[0])
